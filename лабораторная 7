write_str([]):-!.
write_str([H|Tail]):-put(H),write_str(Tail).

read_str(A,N,Flag):-get0(X),r_str(X,A,[],N,0,Flag).
r_str(-1,A,A,N,N,1):-!.
r_str(10,A,A,N,N,0):-!.
r_str(X,A,B,N,K,Flag):-K1 is K+1,append(B,[X],B1),get0(X1),r_str(X1,A,B1,N,K1,Flag).
read_str(A,N):-get0(X),r_str(X,A,[],N,0).
r_str(10,A,A,N,N):-!.
r_str(X,A,B,N,K):-K1 is K+1,append(B,[X],B1),get0(X1),r_str(X1,A,B1,N,K1).

%1
pr1:-read_str(List,Length),write_str(List),write(", "),write_str(List),write(", "),write_str(List),nl,write("Lenght = "),write(Length).

%2
pr2:-read_str(List,_),count_words(List,0,K),write(K),!.
count_words([],K,K):-!.
count_words(A,I,K):-skip_space(A,A1),get_word(A1,Word,A2),Word\=[],I1 is I+1,count_words(A2,I1,K),!.
count_words(_,K,K).

skip_space([32|T],A1):-skip_space(T,A1),!.
skip_space(A1,A1).

get_word([],[],[]):-!.
get_word(A,Word,A2):-get_word(A,[],Word,A2).
get_word([],W,W,[]).
get_word([32|T],W,W,T):-!.
get_word([H|T],W,W1,A2):-append(W,[H],W2),get_word(T,W2,W1,A2).

%3
pr3:-read_str(List,_),frequent_word(List,Word),write_str(Word),!.
frequent_word(A,FreqW):-skip_space(A,A1),get_word(A1,TempW,_),TempW\=[],kolvo_povt(A,TempW,K),frequent_word(A,A,TempW,FreqW,K),!.

sub_list([H|T1],[H|T]):-sub_list(T1,T),!.
sub_list([],[32|_]):-!.
sub_list([],[]):-!.
sub(S,L):-S=L,!.
sub([H|T1],[H|T]):-sub_list(T1,T),!.
sub([H1|T1],[_|T]):-sub([H1|T1],T),!.
sub([],[32|_]):-!.
sub([],[]):-!.

kolvo_povt1([E|T],[E|L],K,Kol):-(sub(L,T)->K1 is K+1;K1 is K),kolvo_povt(T,[E|L],K1,Kol),!.
kolvo_povt(L,El,K):-kolvo_povt(L,El,0,K),!.
kolvo_povt([32|T],El,K,Kol):-kolvo_povt1(T,El,K,Kol).
kolvo_povt([_|T],El,K,Kol):-kolvo_povt(T,El,K,Kol),!.
kolvo_povt([],_,K,K):-!.

frequent_word(A,TempA,FreqW,W,MaxK):-skip_space(TempA,A1),get_word(A1,TempW,A2),TempW\=[],kolvo_povt(A,TempW,K1),(K1>MaxK->frequent_word(A,A2,TempW,W,K1);frequent_word(A,A2,FreqW,W,MaxK)),!.
frequent_word(_,[],W,W,_):-!.

%4
pr4:-read_str(List,Length),write("Length = "),write(Length),nl,(Length>5->first(List,Length);second(List,Length)).

first([H|L],N):-write_str([H]),fir(L,2),rst(L,N).
fir(_,0):-!.
fir([H|L],N):-write_str([H]),N1 is N-1,fir(L,N1),!.
rst([],1):-!.
rst([_|L],N):-N>4->N1 is N-1,rst(L,N1),!.
rst([H|L],N):-N=<4,write_str([H]),N1 is N-1,rst(L,N1),!.

second([H|_],N):-sec(H,N).
sec(_,0):-!.
sec(H,N):-write_str([H]),N1 is N-1,sec(H,N1),!.

%5
pr5:-read_str(List,Length),last_sim(List,Length,El),numbs(List,El).
last_sim([_|L],N,El):-N>1->N1 is N-1,last_sim(L,N1,El),!.
last_sim([H],1,H):-!.

numbs(L,El):-numbs(L,El,0).
numbs([El|L],El,N):-write(N),nl,N1 is N+1,numbs(L,El,N1),!.
numbs([_|L],El,N):-N1 is N+1,numbs(L,El,N1),!.
numbs([],_,_):-!.

%6
pr6:-read_str(List,_),write3(List).
write3(L):-write3(L,0).
write3([H|L],N):-0 is N mod 3,N\=0->write_str([H]),nl,N1 is N+1,write3(L,N1),!.
write3([_|L],N):-N1 is N+1,write3(L,N1),!.
write3([],_):-!.

%7
pr7:-read_str(List,L),kol_P_M(List,KP,KM),before0(List,K0),write("count of +: "),write(KP),nl,write("count of -: "),write(KM),nl,write("count of symbols before 0: "),write(K0).

kol_P_M(L,KP,KM):-kol_P_M(L,0,0,KP,KM).
kol_P_M([43|L],P,M,KP,KM):-P1 is P+1,kol_P_M(L,P1,M,KP,KM),!.
kol_P_M([45|L],P,M,KP,KM):-M1 is M+1,kol_P_M(L,P,M1,KP,KM),!.
kol_P_M([_|L],P,M,KP,KM):-kol_P_M(L,P,M,KP,KM),!.
kol_P_M([],P,M,P,M):-!.

before0([_|L],K):-bf(L,0,K).
bf([48|L],K1,K):-K2 is K1+1,bf(L,K2,K),!.
bf([_|L],K1,K):-bf(L,K1,K),!.
bf([],K,K):-!.

%8
pr8:-read_str(List,_),check(List,120),check(List,119),earlier(List,S),write_str([S]).
check([S|_],S):-!.
check([_|L],S):-check(L,S),!.
check([],S):-write_str([S]),write(" not found"),!,fail.

earlier([120|_],120):-!.
earlier([119|_],119):-!.
earlier([_|L],S):-earlier(L,S),!.
earlier([],_):-!,fail.

%9
pr9:-read_str(List1,L1),read_str(List2,L2),(L1>L2->L is L1-L2,write_Nraz(List1,L);(L2>L1->L is L2-L1,write_Nraz(List2,L);write("strings are equal"))).
write_Nraz(_,0):-!.
write_Nraz(L,N):-write_str(L),N1 is N-1,nl,write_Nraz(L,N1),!.

%10
pr10:-read_str(L,_),(abc(L)->zam(L);addZ(L)).
abc([97|L]):-bc(L).
bc([98|L]):-c(L).
c([99|_]).

zam(L):-zam(L,3,L1),append([119,119,119],L1,List),write_str(List).
zam(L,0,L):-!.
zam([_|L],N,L1):-N1 is N-1,zam(L,N1,L1),!.

addZ(L):-append(L,[122,122,122],List),write_str(List).

%11
pr11:-read_str(L,Len),(Len>10->ost(L);dop(L,Len)).
ost(L):-ost(L,6,L1),write_str(L1).
ost(_,0,_):-!.
ost([H|L],N,[H|L1]):-N1 is N-1,ost(L,N1,L1),!.

dop(L,Len):-dop(L,Len,L1),write_str(L1).
dop(L,12,L):-!.
dop(L,Len,L1):-append(L,[111],List),Len1 is Len+1,dop(List,Len1,L1),!.

%12
pr12:-read_str(L,Len),Len1 is Len div 3,length(List,Len1),fragments(List,L,NewList),rand_zam(NewList,NewNewList),sort(0,=<,NewNewList,Sorted),write_ListOfList(Sorted).
fragments(List,L,List):-length(L,N),N<3,!.
fragments(List,L,NList):-f(L,MiniList,EndL),in_list(List,MiniList),fragments(List,EndL,NList),!.

f(L,MiniList,EndL):-f(L,3,MiniList,EndL).
f(EndL,0,[],EndL):-!.
f([H|TempL],N,[H|MiniList],EndL):-N1 is N-1,f(TempL,N1,MiniList,EndL),!.

in_list([El|_],El).
in_list([_|T],El):-in_list(T,El).

%в таблице символы с номерами 32-126
rand_zam([],[]):-!.
rand_zam([H|List],[L|NewList]):-rand_zam1(H,L),rand_zam(List,NewList),!.
rand_zam1([S1|H],L):-rand_zam1(H,S2,S3),rand_z(S1,S2,S3,L).
rand_zam1([S2|H],S2,S3):-rand_zam1(H,S2,S3),!.
rand_zam1([S3],_,S3):-!.

rand_z(S1,S2,S3,L):-random_between(32,126,X),(X\=S1,X\=S2,X\=S3->L=[S1,X,S3];rand_z(S1,S2,S3,L)).

write_ListOfList([]):-!.
write_ListOfList([H|List]):-write_str(H),nl,write_ListOfList(List),!.

%13
pr13:-read_str(L,_),pr13(L).
pr13(L):-pr13(L,0,NewL),write_str(NewL).
pr13([],_,[]):-!.
pr13([H|L],N,[97|NewL]):-0 is N mod 2,H\=97,H\=98->N1 is N+1,pr13(L,N1,NewL),!.
pr13([_|L],N,[99|NewL]):-0 is N mod 2->N1 is N+1,pr13(L,N1,NewL),!.
pr13([H|L],N,[H|NewL]):-N1 is N+1,pr13(L,N1,NewL),!.

